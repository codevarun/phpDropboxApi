<?php/*** Dropbox Class** Copyright (c) 2011 Harrison Jones* * Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the "Software"), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:* * The above copyright notice and this permission notice shall be included in* all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN* THE SOFTWARE.** @author Harrison Jones [harrison@harrisonhjones.com] [http://harrisonhjones.com/phpDropboxApi]* @author Jaka Jancar [jaka@kubje.org] [http://jaka.kubje.org/]** @version 1.0* @since 2011-12-25** Version History* 1.0 - Initial Release** Description* Allows for non-OAuth interaction with dropbox.* API is "simulated." Uses scraping. * Does NOT require 3 phase OAuth, usernames and password* are programmed in. ** Contribution Note* This class is based off Jaka Jancar's Dropbox-Uploader* (http://jaka.kubje.org/projects/dropbox-uploader/) * It has been heavily modified to its current form but I could not have * coded this class without using his class as a reference.* -Harrison Jones - 2011-12-25*/class Dropbox {	// Class constants	const CACERT_SOURCE_SYSTEM = 0;	const CACERT_SOURCE_FILE = 1;	const CACERT_SOURCE_DIR = 2;	const DEBUG = 1;		// Class variables	protected $email;		// Email - Dropbox Username	protected $password;	// Password - Dropbox Password	protected $uid;			// UID - Dropbox UID	protected $caCertSourceType = self::CACERT_SOURCE_SYSTEM;	protected $caCertSource;	protected $loggedIn = false;	protected $cookies = array();	protected $masterToken;	/**	* Constructor	*	* @param string $email - Dropbox Email to be logged in to	* @param string $password - Dropbox password	*/	public function __construct($email, $password) {		// Check requirements		if (!extension_loaded('curl'))			throw new Exception('DropboxUploader requires the cURL extension.');		// Move the passed variables over to class variables		$this->email = $email;		$this->password = $password;		// Login/Authorize		$this->authorize();	}	/**	* Sets the Certificate Authority (Ca) Certificate File	* 	* Sets php's CA Certificate file to $file	*	* @param file The file to use as the certificate file	*/	public function setCaCertificateFile($file)	{		$this->caCertSourceType = self::CACERT_SOURCE_FILE;		$this->caCertSource = $file;	}	/**	* Sets the Certificate Authority (Ca) Certificate Directory	* 	* Sets php's CA Certificate directory to $dir	*	* @param dir The dir to use as the certificate directory	*/	public function setCaCertificateDir($dir)	{		$this->caCertSourceType = self::CACERT_SOURCE_DIR;		$this->caCertSource = $dir;	}	/**	* Generates a public link url	*	* Using a given filename a public link url is generated. Note	* this function will not return the correct public link for any	* file not in the Public folder. This is a dropbox issue. 	*	* @param file The file to generate the public link of	* @return The public link url	*/	public function publicLink($file)	{		return "http://dl.dropbox.com/u/" . $this->uid . "/" . $file;	}	/**	* Deletes a file in a folder	*	* Deletes a specific file in a specific folder. Throws an error	* if the file is already deleted or if it cannot be deleted	*	* @param files The files to be deleted (an array)	* @throws Exception Throws an exception describing the error	*/	public function delete($files)	{		$data = $this->request('https://www.dropbox.com/home');		$token = $this->extractToken($data, 'https://dl-web.dropbox.com/upload');				// Because PHP doesn't allow for arrays with duplicate keys, and because I can't figure this out		// I'm doning multiple deletes in the sloppyest way possible. 		foreach ($files as &$file)		{			$postArray = array('plain'=>'yes', 'files'=>$file, 'to_path'=>$to_path, 't'=>$token);			$data = $this->request("https://www.dropbox.com/cmd/delete?long_running=1", true, $postArray);			if (strpos($data, 'err:') != false)			{				throw new Exception('Delete failed! Error: ' . substr($data, strpos($data, 'err:')+4, -1));			}		}	}	/**	* Retrieves Dropbox account information	*	* Retrieves Dropbox account info such as UID, Quota, Quota used, 	* Quota used percentage, and other useful info	*	* @return An stdObject containing the account info	*/	public function account()	{		$regexExp = "/uid: \'(\d+)\'[\w\W]*;\">(\d+.\d+)%[\w\W]*\((\d+.\d+)\w+ of (\d+.\d+)[\w\W]*Regular files \((\d+\.\d+)[\w\W]*Shared files \((\d+.\d+)[\w\W]*Unused space \((\d+.\d+)/";		$data = $this->request('https://www.dropbox.com/account/info');				if (!preg_match($regexExp, $data, $matches) || !isset($matches[7]))			throw new Exception("Cannot retreive account info");				$account = new stdClass;		$account->uid = $matches[1];		$account->quotaPercentUsed = $matches[2];		$account->quotaUsed = $matches[3];		$account->quota = $matches[4];				$account->regularUsed = $matches[5];		$account->sharedUsed = $matches[6];		$account->unused = $matches[7];				return $account;	}	/**	* Copys a file from a Dropbox folder to another folder	* 	* Cops a file from a Dropbox folder to another Dropbox folder	*	* @param files The local files to be copied	* @to_path The remote folder to copy the files to.	* @throws Exception An exception describing the copy error	*/	public function copy($files, $to_path) {		$data = $this->request('https://www.dropbox.com/home');		$token = $this->extractToken($data, 'https://dl-web.dropbox.com/upload');		// Because PHP doesn't allow for arrays with duplicate keys, and because I can't figure this out		// I'm doning multiple copys in the sloppyest way possible. 		foreach ($files as &$file)		{			$postArray = array('plain'=>'yes', 'files'=>$file, 'to_path'=>$to_path, 't'=>$token);			$data = $this->request("https://www.dropbox.com/cmd/copy?long_running=1", true, $postArray);			if (strpos($data, 'err:') != false)			{				throw new Exception('Copy failed! Error: ' . substr($data, strpos($data, 'err:')+4, -1));			}		}	}		/**	* Moves a file from a Dropbox folder to another folder	* 	* Moves a file from a Dropbox folder to another Dropbox folder	*	* @param files The local files to be moved	* @to_path The remote folder to move the files to.	* @throws Exception An exception describing the move error	*/	public function move($files, $to_path) {		$data = $this->request('https://www.dropbox.com/home');		$token = $this->extractToken($data, 'https://dl-web.dropbox.com/upload');		// Because PHP doesn't allow for arrays with duplicate keys, and because I can't figure this out		// I'm doning multiple copys in the sloppyest way possible. 		foreach ($files as &$file)		{			$postArray = array('plain'=>'yes', 'files'=>$file, 'to_path'=>$to_path, 't'=>$token);			$data = $this->request("https://www.dropbox.com/cmd/move?long_running=1", true, $postArray);			if (strpos($data, 'err:') != false)			{				throw new Exception('Move failed! Error: ' . substr($data, strpos($data, 'err:')+4, -1));			}		}	}		/**	* Create a file or folder	* 	* Creates a file or folder in Dropbox	*	* @param to_path The file or folder to be created	* @param basePath The base path to create the folder	* @throws Exception An exception describing the create error	*/	public function create($to_path, $basePath) {		$data = $this->request('https://www.dropbox.com/home');		$token = $this->extractToken($data, 'https://dl-web.dropbox.com/upload');				$postArray = array('plain'=>'yes', 'to_path'=>$to_path, 't'=>$token, 'folder'=>'yes');		$data = $this->request("https://www.dropbox.com/cmd/new" . $basePath . "?long_running=1", true, $postArray);		print_r($data);	}	/**	* Uploads a file to a Dropbox folder	* 	* Uploads a local file to a remote Dropbox folder	*	* @param file The local file to be uploaded	* @param folder The remote folder to upload the file to. Defaults to "Public"	* @throws Exception An exception describing the upload error	*/	public function upload($file, $folder='/Public/') {		if (!file_exists($file) or !is_file($file) or !is_readable($file))			throw new Exception("File '$file' does not exist or is not readable.");				if (!is_string($folder))			throw new Exception("Remote directory must be a string, is ".gettype($folder)." instead.");				$data = $this->request('https://www.dropbox.com/home');		$token = $this->extractToken($data, 'https://dl-web.dropbox.com/upload');				$data = $this->request('https://dl-web.dropbox.com/upload', true, array('plain'=>'yes', 'file'=>'@'.$file, 'dest'=>$folder, 't'=>$token));		if (strpos($data, 'HTTP/1.1 302 FOUND') === false)			throw new Exception('Upload failed!');	}	/**	* Logs into dropbox	*	* Logs into dropbox. Stores the recieved cookies to pass to other functions. Only trys to login if not already logged in.	*	* @throws Exception An exception describing why the login failed. 	*/	protected function authorize() {		if (!$this->loggedIn)		{			$data = $this->request('https://www.dropbox.com/login');			$token = $this->extractToken($data, '/login');						$data = $this->request('https://www.dropbox.com/login', true, array('login_email'=>$this->email, 'login_password'=>$this->password, 't'=>$token));						if (stripos($data, 'location: /home') === false)			{				throw new Exception('Authorize unsuccessful.');				var_dump($data);			}			else			{				$data = $this->request('https://www.dropbox.com/account/info');				$regexExp = "/uid: \'(\d+)\'[\w\W]+TOKEN: \'([\d\w]+)\'/";				//var_dump($data);				if (!preg_match($regexExp, $data, $matches) || !isset($matches[1]))				throw new Exception("Cannot retreive account info");				$this->uid = $matches[1];				$this->masterToken = $matches[2];				$this->loggedIn = true;			}		}	}	/**	* Requestes a web page	*	* Uses cURL to send a request to a web page	*	* @param url The url to request	* @param post If true, does a POST request, else GETs	* @param postData The data to be posted when POSTing	* @return The data from the request	* @throws Exception An exception indicating a cURL request error	*/    protected function request($url, $post=false, $postData=array()) {        $ch = curl_init();		curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, 0);		curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, 0);				curl_setopt($ch, CURLOPT_URL, $url);		//curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);		//curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);		switch ($this->caCertSourceType) {			case self::CACERT_SOURCE_FILE:				curl_setopt($ch, CURLOPT_CAINFO, $this->caCertSource);				break;			case self::CACERT_SOURCE_DIR:				curl_setopt($ch, CURLOPT_CAPATH, $this->caCertSource);				break;		}		curl_setopt($ch, CURLOPT_HEADER, 1);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);		if ($post) {			curl_setopt($ch, CURLOPT_POST, $post);			curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);		}				// Send cookies		$rawCookies = array();		foreach ($this->cookies as $k=>$v)			$rawCookies[] = "$k=$v";		$rawCookies = implode(';', $rawCookies);		curl_setopt($ch, CURLOPT_COOKIE, $rawCookies);				$data = curl_exec($ch);				if ($data === false)			throw new Exception('Cannot execute request: '.curl_error($ch));				// Store received cookies		preg_match_all('/Set-Cookie: ([^=]+)=(.*?);/i', $data, $matches, PREG_SET_ORDER);		foreach ($matches as $match)			$this->cookies[$match[1]] = $match[2];				curl_close($ch);				return $data;	}	/**	* Extracts a token from data	* 	* Uses regular expressions to extract a authentication token	* from data.	*	* @param data The data to be scanned for a token	* @param formAction the form action used to extract the token. Used for debug	* @return The token found in the data	* @throws An exception describing why the token could not be found. 	*/	protected function extractToken($data, $formAction) {		if (!preg_match('/<form [^>]*'.preg_quote($formAction, '/').'[^>]*>.*?(<input [^>]*name="t" [^>]*value="(.*?)"[^>]*>).*?<\/form>/is', $data, $matches) || !isset($matches[2]))			throw new Exception("Cannot extract token! (form action=$formAction)");		return $matches[2];	}}